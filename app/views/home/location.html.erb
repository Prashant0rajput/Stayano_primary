<!DOCTYPE html>
<html>
  <head>
    <title>Simple click event</title>

  <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>
  <%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>

  <%= csrf_meta_tags %>




    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <style>
      /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
     
      /* Optional: Makes the sample page fill the window. */
      
    </style>
  </head>






  <body>


  

<div id="main">

<section>
    <div id="map">

      <div class="preloader-wrapper big active">
      <div class="spinner-layer spinner-blue">
        <div class="circle-clipper left">
          <div class="circle"></div>
        </div><div class="gap-patch">
          <div class="circle"></div>
        </div><div class="circle-clipper right">
          <div class="circle"></div>
        </div>
      </div>
    </div>
</section>



<script type="text/javascript">
    


    </script>



    <script>



     var locationJsonData;
    $.ajax({
  
  url:"http://localhost:3000/user/location",
  method:'GET',
  dataType:"JSON",
  
  success:function(data){
             alert('get ajax worked');
             locationJsonData = data;
             
             setMarkers(locationJsonData,map);
            }
  
});
   


     var map, infoWindow;
      function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: 28.7041, lng: 77.1025},
          zoom: 17,
           gestureHandling: 'none',
          zoomControl: true,
          disableDefaultUI: true,
          mapTypeControl: false,
          scaleControl: false,
          streetViewControl: false,
          rotateControl: false,
          fullscreenControl: false,


          styles: [
  {
    elementType: 'geometry',
    stylers: [
      {
        color: '#212121'
      }
    ]
  },
  {
    elementType:'labels',
    stylers: [
      {
        visibility: 'off'
      }
    ]
  },
  {
    elementType:'labels.icon',
    stylers: [
      {
        visibility: 'off'
      }
    ]
  },
  {
    elementType:'labels.text.fill',
    stylers: [
      {
        color: '#757575'
      }
    ]
  },
  {
    elementType:'labels.text.stroke',
    stylers: [
      {
        color: '#212121'
      }
    ]
  },
  {
    featureType: 'administrative',
    elementType: 'geometry',
    stylers: [
      {
        color: '#757575'
      }
    ]
  },
  {
    featureType: 'administrative.country',
    elementType:'labels.text.fill',
    stylers: [
      {
        color: '#9e9e9e'
      }
    ]
  },
  {
    featureType: 'administrative.land_parcel',
    stylers: [
      {
        visibility: "off"
      }
    ]
  },
  {
    featureType: 'administrative.locality',
    elementType:'labels.text.fill',
    stylers: [
      {
        color: '#bdbdbd'
      }
    ]
  },
  {
    featureType: 'administrative.neighborhood',
    stylers: [
      {
        visibility: "off"
      }
    ]
  },
  {
    featureType: 'poi',
    elementType:'labels.text.fill',
    stylers: [
      {
        color: '#757575'
      }
    ]
  },
  {
    featureType: 'poi.park',
    elementType: 'geometry',
    stylers: [
      {
        color: '#181818'
      }
    ]
  },
  {
    featureType: 'poi.park',
    elementType:'labels.text.fill',
    stylers: [
      {
        color: '#616161'
      }
    ]
  },
  {
    featureType: 'poi.park',
    elementType:'labels.text.stroke',
    stylers: [
      {
        color: '#1b1b1b'
      }
    ]
  },
  {
    featureType: 'road',
    elementType: 'geometry.fill',
    stylers: [
      {
        color: '#2c2c2c'
      }
    ]
  },
  {
    featureType: 'road',
    elementType:'labels.text.fill',
    stylers: [
      {
        color: '#8a8a8a'
      }
    ]
  },
  {
    featureType: 'road.arterial',
    elementType: 'geometry',
    stylers: [
      {
        color: '#373737'
      }
    ]
  },
  {
    featureType: 'road.highway',
    elementType: 'geometry',
    stylers: [
      {
        color: '#3c3c3c'
      }
    ]
  },
  {
    featureType: 'road.highway.controlled_access',
    elementType: 'geometry',
    stylers: [
      {
        color: '#4e4e4e'
      }
    ]
  },
  {
    featureType: 'road.local',
    elementType: 'labels.text.fill',
    stylers: [
      {
        color: '#616161'
      }
    ]
  },
  {
    featureType: 'transit',
    elementType: 'labels.text.fill',
    stylers: [
      {
        color: '#757575'
      }
    ]
  },
  {
    featureType: 'transit.station',
    elementType: 'geometry.fill',
    stylers: [
      {
        visibility: "on"
      }
    ]
  },
  {
    featureType: 'water',
    elementType: 'geometry',
    stylers: [
      {
        color: '#000000'
      }
    ]
  },
  {
    featureType: 'water',
    elementType: 'labels.text.fill',
    stylers: [
      {
        color: '#3d3d3d'
      }
    ]
  }
]

          
        });








        
// setMarkers(map);
        
        
       
     
      }


      function setMarkers(locationJsonData,map) {
        alert('<%=current_user.id%>')
        // setCenter(latlng:LatLng|LatLngLiteral)
        // Adds markers to the map.

        // Marker sizes are expressed as a Size of X,Y where the origin of the image
        // (0,0) is located in the top left of the image.

        // Origins, anchor positions and coordinates of the marker increase in the X
        // direction to the right and in the Y direction down.
        var image = {
          url: 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png',
          // This marker is 20 pixels wide by 32 pixels high.
          size: new google.maps.Size(20, 32),
          // The origin for this image is (0, 0).
          origin: new google.maps.Point(0, 0),
          // The anchor for this image is the base of the flagpole at (0, 32).
          anchor: new google.maps.Point(0, 32)
        };
        // Shapes define the clickable region of the icon. The type defines an HTML
        // <area> element 'poly' which traces out a polygon as a series of X,Y points.
        // The final coordinate closes the poly by connecting to the first coordinate.
        var shape = {
          coords: [1, 1, 1, 20, 18, 20, 18, 1],
          type: 'poly'
        };
        
        for (var i = 0; i < locationJsonData.length; i++) {
          var locJSData = locationJsonData[i];
          var marker = new google.maps.Marker({
            position: {lat: locJSData.latitude, lng: locJSData.longitude},
            map: map,
            icon: image,
            shape: shape,
            label:locJSData.gender,
             title: locJSData.gender,
            
          });
          map.setCenter(marker.getPosition());
        }
      };

      





     
    
    


    


      //  function loadmarker(locationJsonData) {
      //   var i =0 ;
      //   alert("function called")
      //   for (i = 0; i < locationJsonData.length; i++) {
      //     var coords = [locationJsonData[i].latitude,locationJsonData[i].longitude];
      //     alert(coords);
      //     var latLng = new google.maps.LatLng(coords[0],coords[1]);
      //     console.log(latlng);
      //     var marker = new google.maps.Marker({
      //       position: latLng,
      //        map: map
      //     });
      //   }
      //   marker.setMap(map);
      // }
      
    </script>


   



    <script async defer
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDihobqgTXA6DFekLdMKcTYwv0k8AoEgcY&callback=initMap">
    
    </script>





     <script src="https://code.jquery.com/jquery-3.1.0.min.js"></script>

     


    <script type="text/javascript">

    

    window.onload = function(){
      var lat , lng ;
    navigator.geolocation.getCurrentPosition(function(position) {
             
              lat= position.coords.latitude,
               console.log(lat);
              lng= position.coords.longitude
            
    




       
          
       // this content is being called ... further
    // sending a hash of data , normal data will be null
    $.ajax({
      url: '/location/create',
      method: 'POST',
      
      data: {latitude: lat , longitude: lng } ,
       
      
      success: function(result){
        // alert(position.latitude, position.longitude);
         // window.alert('successfully added location to Database');
        // var list = $(".posts")
        // var new_element = document.getElementById('#posts')
         // var new_element = document.createElement('div');
         // var next_element = list.firstElementChild;
        // new_element.innerHTML = result.content; //taking out the content of data 
        // list.insertBefore(new_element,next_element);
        // next_element.prepend("result.content");
        
        alert("data chala gya");
       
      },
      
       error: function(error){
        alert('ajax not working');
        console.log(error);
        
       }
       });
    });
  };








    </script>



      
   
  

 




</section>
</div>

   
  </body>
</html>